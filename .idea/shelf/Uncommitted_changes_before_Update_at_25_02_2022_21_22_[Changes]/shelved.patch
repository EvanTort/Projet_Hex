Index: hexmat.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import tkinter as tk\r\nimport tkinter.font as tkFont\r\nfrom numpy import zeros\r\nfrom numpy import where\r\nfrom numpy import max\r\nfrom string import ascii_letters\r\nfrom copy import deepcopy\r\n#from tkinter.tix import *\r\n#import math\r\n#import time\r\n#test\r\n#test\r\n\r\n\r\ndef Rgb_convert(rgb):\r\n    return \"#%02x%02x%02x\" % rgb \r\n\r\n\r\ndef Plein_ecran (event):\r\n    if fe.attributes ()[7] == 0:\r\n        fe.attributes('-fullscreen', True)\r\n        \r\n    else:\r\n        fe.attributes('-fullscreen', False)\r\n\r\n\r\ndef Affichage_plateau (plat, size, scale):\r\n    \r\n    for i in range (size):\r\n        for j in range (size):\r\n            x = (width-(scale*((size-1)*3+2)))/2 + (j*scale*1.5) + (i*scale*1.5)\r\n            y = (height-(scale*size*2*0.866))/2 - (0.866*scale) + (0.866*scale*size) - (j*scale*0.866) + (i*scale*0.866)\r\n            \r\n            if plat[i][j]==0:\r\n                partie1.create_polygon (x+(0.5*scale), y, x+(1.5*scale), y, x+(2*scale), y+(scale*0.866), x+(scale*1.5), y+(scale*2*0.866),\r\n                                      x+(scale*0.5), y+(scale*2*0.866), x, y+(scale*0.866), fill = Rgb_convert((160,160,160)), activefill = Rgb_convert((180,180,180)), outline = 'black', width=3, tags = (str(i) + \",\" + str(j) , \"cellule\") )\r\n                \r\n            if i == 0:\r\n                partie1.create_text( x, y + 0.2*scale, font = Police, fil = 'black', text = ascii_letters[j] )\r\n            \r\n            if j == 0:\r\n                partie1.create_text( x, (y+1.5*scale), font = Police, fil = 'black', text = i+1)\r\n\r\n\r\ndef Reset_Value (New_plat, New_ordre):\r\n    \r\n    tour = len( New_ordre )\r\n    ordre = New_ordre\r\n    plat = New_plat\r\n    \r\n    return (plat, ordre, tour)\r\n\r\n\r\ndef Clear_plateau ():\r\n    \r\n    if len (ordre) != 0:\r\n        partie1.itemconfig ( str( ordre[ len(ordre)-1 ][0] ) + \",\" + str( ordre[ len(ordre)-1 ][1] ),  dash = \"\"  , outline = 'black', width= 3)\r\n    \r\n    for i in range (len(plat)):\r\n        for j in range (len(plat)):\r\n            #if plat[i][j] != 0 :\r\n            tag = str(i ) + ',' + str( j )   \r\n            partie1.itemconfig (tag, fill = Rgb_convert((160,160,160)), activefill = Rgb_convert((180,180,180)) )\r\n    \r\ndef load_plateau (plat):\r\n    \r\n    for i in range (len(plat)):\r\n        for j in range(len(plat)):\r\n            \r\n            if plat [i][j] == 0:\r\n                pass\r\n            \r\n            elif plat [i][j] == 1:\r\n                partie1.itemconfig (str(i) + \",\" + str(j), fill = \"red\" )\r\n                \r\n            elif plat [i][j] == 2:\r\n                partie1.itemconfig (str(i) + \",\" + str(j), fill = \"blue\" )\r\n                \r\n\r\n\r\ndef Reset ():\r\n    \r\n    global plat,ordre,tour,Game_status\r\n    Clear_plateau()\r\n    plat,ordre,tour = Reset_Value(zeros((size, size)),[])\r\n    Game_status = True\r\n\r\n\r\ndef Show_distance (team,search):\r\n    \r\n    print(search)\r\n    r = 220/(max(search)-10)\r\n    for i in range (len(plat)):\r\n        for j in range(len(plat)):\r\n            if search[i][j] >= 10 :\r\n                tag = str(i ) + ',' + str( j )\r\n                if team == 1 :\r\n                    partie1.itemconfig (tag, fill = Rgb_convert((255-int((search[i][j]-10)*r),0,0)) )\r\n                else :\r\n                    partie1.itemconfig (tag, fill = Rgb_convert((0,0,255-int((search[i][j]-10)*r))) )\r\n                    \r\n                    \r\ndef Detection_victoire (plat, slot):\r\n    \r\n    size = len(plat)\r\n    team = plat[slot[0]][slot[1]] #team = 1, le joueur blanc viens de jouer, team = 2 le joueur noir viens de jouer\r\n    \r\n    start = [] #liste des coordonnées de départ\r\n    \r\n\r\n    if team == 1:\r\n        for i in range(size): #verrou de pion jouer sur un bord\r\n            if plat[0][i] == team :\r\n                start.append( ( 0, i) )\r\n    else:\r\n        for i in range(size): #verrou de pion jouer sur un bord\r\n            if plat[i][0] == team :\r\n                start.append( ( i, 0) )\r\n            \r\n    if len(start) == 0 :\r\n        #if bot == True:\r\n            #Ask_bot(plat)\r\n            pass\r\n    \r\n    else:\r\n        end = [] #liste des coordonnées d'arrivée\r\n        #print(\"verrou 1 ok\")\r\n        \r\n        if team == 1:\r\n            for i in range(size):  #verrou de pion jouer sur l'autre bord\r\n                if plat[size-1][i] == team :\r\n                    end.append( ( size-1, i) )\r\n        else:\r\n            for i in range(size):  #verrou de pion jouer sur l'autre bord\r\n                if plat[i][size-1] == team :\r\n                    end.append( ( i, size-1) )\r\n            \r\n        if len(end) == 0 :\r\n            #if bot == True:\r\n                #move = Ask_bot(plat)\r\n                #plat[ move[0] ][ move[1] ] = \r\n                pass\r\n        \r\n        else:\r\n            #print(\"verrou 2 ok\")\r\n            if plat[plat==team].size < size: #verrou de minimum de pion joué pour une victoire\r\n                #if bot == True:\r\n                    #Ask_bot(plat)\r\n                    pass\r\n            \r\n            else:\r\n                #print(\"verrou 3 ok\")\r\n                search = deepcopy(plat) #creation d'une matrice de travail copié d'un plateau\r\n                distance = 9\r\n                \r\n                Propagation( slot, search, team, distance) #fonction récursive de propagation sur le plateau de travail en fonction du dernier coup joué\r\n                print (search)\r\n                \r\n                \r\n                if True in [search[ k[0] ][ k[1] ] >= 10 for k in start]: #si un des pions de la team touche un des bord et est relier au dernier coup\r\n                    \r\n                    if True in [search[ q[0] ][ q[1] ] >= 10 for q in end]: #si un des pions de la team touche l'autre bord et est relier au dernier coup\r\n                        \r\n                        if team == 2:\r\n                            print(\"victoire bleu\")\r\n                            Fin_Partie(team, search)\r\n                                \r\n                        else:\r\n                            print(\"victoire rouge\")\r\n                            Fin_Partie(team, search)\r\n                Show_distance(team,search)\r\n            \r\n            \r\ndef Propagation (slot, search, team, distance):\r\n\r\n    distance += 1\r\n    search[ slot[0] ][ slot[1] ] = distance\r\n\r\n    if slot[0]+1 <= len(plat)-1:\r\n        if search[ slot[0]+1 ][ slot[1] ] == team or search[ slot[0]+1 ][ slot[1] ] > distance:\r\n            Propagation( ( slot[0]+1, slot[1]), search, team, distance)\r\n            \r\n    if slot[0]+1 <= len(plat)-1 and slot[1]-1 >= 0:\r\n        if search[ slot[0]+1 ][ slot[1]-1 ] == team  or search[ slot[0]+1 ][ slot[1]-1 ] > distance:\r\n            Propagation( ( slot[0]+1, slot[1]-1), search, team, distance)\r\n            \r\n    if slot[1]-1 >= 0:\r\n        if search[ slot[0] ][ slot[1]-1 ] == team or search[ slot[0] ][ slot[1]-1 ] > distance:\r\n            Propagation( ( slot[0], slot[1]-1), search, team, distance)\r\n            \r\n    if slot[1]+1 <= len(plat)-1:\r\n        if search[ slot[0] ][ slot[1]+1 ] == team or search[ slot[0] ][ slot[1]+1 ] > distance:\r\n            Propagation( ( slot[0], slot[1]+1), search, team, distance)\r\n            \r\n    if slot[0]-1 >= 0 and slot[1]+1 <= len(plat)-1:\r\n        if search[ slot[0]-1 ][ slot[1]+1 ] == team or search[ slot[0]-1 ][ slot[1]+1 ] > distance:\r\n            Propagation( ( slot[0]-1, slot[1]+1), search, team, distance)\r\n            \r\n    if slot[0]-1 >= 0:\r\n        if search[ slot[0]-1 ][ slot[1] ] == team or search[ slot[0]-1 ][ slot[1] ] > distance:\r\n            Propagation( ( slot[0]-1, slot[1]), search, team, distance)\r\n    \r\n    \r\ndef Fin_Partie (team, search):\r\n    \r\n    \r\n    global Game_status\r\n    Game_status = False\r\n    \r\n    if len (ordre) != 0:\r\n        partie1.itemconfig ( str( ordre[ len(ordre)-1 ][0] ) + \",\" + str( ordre[ len(ordre)-1 ][1] ),  dash = \"\"  , outline = 'black', width = 3)\r\n        \r\n    partie1.itemconfig(\"cellule\", activefill = '')\r\n    \r\n    chemin = []\r\n    \r\n    if team == 1:\r\n        \r\n        depart = min(filter(lambda i : i > 10 , search[0]))\r\n        debut = list(where((search[0] == depart))[0])\r\n        for i in debut:\r\n            chemin.append( (0, i) )\r\n        \r\n        \"\"\"\r\n        for i in range (int(depart)-10):\r\n            \r\n            if slot[0]+1 <= len(plat)-1:\r\n                if search[ slot[0]+1 ][ slot[1] ] == team or search[ slot[0]+1 ][ slot[1] ] > distance:\r\n                    Propagation( ( slot[0]+1, slot[1]), search, team, distance)\r\n                    \r\n            elif slot[0]+1 <= len(plat)-1 and slot[1]-1 >= 0:\r\n                if search[ slot[0]+1 ][ slot[1]-1 ] == team  or search[ slot[0]+1 ][ slot[1]-1 ] > distance:\r\n                    Propagation( ( slot[0]+1, slot[1]-1), search, team, distance)\r\n                    \r\n            elif slot[1]-1 >= 0:\r\n                if search[ slot[0] ][ slot[1]-1 ] == team or search[ slot[0] ][ slot[1]-1 ] > distance:\r\n                    Propagation( ( slot[0], slot[1]-1), search, team, distance)\r\n                    \r\n            elif slot[1]+1 <= len(plat)-1:\r\n                if search[ slot[0] ][ slot[1]+1 ] == team or search[ slot[0] ][ slot[1]+1 ] > distance:\r\n                    Propagation( ( slot[0], slot[1]+1), search, team, distance)\r\n                    \r\n            elif slot[0]-1 >= 0 and slot[1]+1 <= len(plat)-1:\r\n                if search[ slot[0]-1 ][ slot[1]+1 ] == team or search[ slot[0]-1 ][ slot[1]+1 ] > distance:\r\n                    Propagation( ( slot[0]-1, slot[1]+1), search, team, distance)\r\n                    \r\n            elif slot[0]-1 >= 0:\r\n                if search[ slot[0]-1 ][ slot[1] ] == team or search[ slot[0]-1 ][ slot[1] ] > distance:\r\n                    Propagation( ( slot[0]-1, slot[1]), search, team, distance)\r\n        \r\n        \"\"\"\r\n\r\n                \r\n    \r\n\r\ndef Clic_gauche (event):\r\n    \r\n    global tour, Game_status\r\n    \r\n    tags = partie1.gettags( 'current')\r\n\r\n    if len (tags) == 3 and Game_status == True :\r\n        \r\n        tag = tags[0].split(\",\")\r\n        slot = (int(tag[0]),int(tag[1]))\r\n        \r\n        if tour == 0 and slot[0] == size - (size+1)/2 and slot[1] == size - (size+1)/2 : #condition de l'interdiction de jouer le premier coup sur le centre\r\n            pass\r\n        \r\n        elif plat [ slot[0] ] [ slot[1] ] == 0 :\r\n            \r\n            if len (ordre) != 0:\r\n                partie1.itemconfig ( str( ordre[ len(ordre)-1 ][0] ) + \",\" + str( ordre[ len(ordre)-1 ][1] ),  dash = \"\"  , outline = 'black', width = 3)       \r\n            \r\n            if tour%2 == 0:\r\n                partie1.tag_raise(tags[0])\r\n                partie1.itemconfig (tags[0], fill = 'red', dash = (3,3,3,3), outline = Rgb_convert((230,230,230)), activefill = \"\", width = 2 )\r\n                tour += 1\r\n                plat[slot[0]][slot[1]] = 1\r\n                ordre.append((slot[0],slot[1]))\r\n                print(\"Tour\", tour, ': Rouge (1)')\r\n                print(plat)\r\n                Detection_victoire( plat, slot)                    \r\n\r\n            else:\r\n                partie1.tag_raise(tags[0])\r\n                partie1.itemconfig (tags[0], fill = 'blue', dash = (3,3,3,3), outline = Rgb_convert((230,230,230)), activefill = \"\", width = 2 )\r\n                tour += 1\r\n                plat[ slot[0] ][ slot[1] ] = 2\r\n                ordre.append((slot[0],slot[1]))\r\n                print(\"Tour\", tour, \": Bleu (2)\")\r\n                print(plat)\r\n                Detection_victoire(plat, slot)\r\n                \r\n                \r\n\r\n    \r\n\"\"\"\r\ndef Enregistrement (plat, ordre, numero):\r\n    pass\r\n\r\n\r\ndef Parametrage():\r\n    pass\r\n\r\ndef Ask_bot (plat):\r\n    pass\r\n\r\n\"\"\"\r\n\r\nwidth = 1300\r\nsize = 5\r\nplayer1 = False #active ou non le bot en tant que player 2\r\nplayer2 = False\r\nbegin = False #soit blanc commence, soit noir, soit random\r\ntimed = False #active ou non le minuteur pour les joueurs\r\nGame_status = True\r\n\r\nheight = round(width*0.618)\r\nscale = (width-250)/((size-1)*3+2)\r\n\r\ntour = 0\r\nordre = []\r\n\r\n\r\nplat = zeros((size, size)) #Crée une matrice carré de taille size remplie de 0\r\n\r\n\r\nfe = tk.Tk ()\r\n\r\n\r\nfe.title('HexGame')\r\nfe.config(bg= Rgb_convert((50,50,50)))\r\nxu=width+(width*(0.618**3))\r\nyu=height+(width*(0.618**5))\r\n\r\n\r\nwindow = str(round(width+(width*(0.618**3)))) + 'x' + str(round(height+(width*(0.618**5)))) + '+' + str(10) + '+' + str( 100 )\r\n\r\nfe.geometry(window)\r\n\r\n\r\nframe = tk.Frame (fe, width = round(width+(width*(0.618**3))), height = round(height+(width*(0.618**5))), bg ='blue')\r\nframe.place (relx = 0.5, rely = 0.5, anchor = \"center\")\r\n    \r\nframe.configure(bg = Rgb_convert((100,80,70)))\r\n\r\n\r\npartie1 = tk.Canvas (frame, width = width, height = height, bg = Rgb_convert((200,160,150)), highlightbackground = 'red', highlightthickness = 0)\r\npartie1.grid (row = 0, column = 0, rowspan = 3, columnspan = 3)\r\n\r\nenregi1 = tk.Button (frame, text = \"Enregistrement 1\", command = fe.destroy, borderwidth = 5, relief = 'groove', bg = 'pink')\r\nenregi1.grid (row = 0, column = 4, padx = 10, pady = 10)\r\n\r\nenregi2 = tk.Button (frame, text = \"Enregistrement 2\", command = fe.destroy, borderwidth = 5, relief = 'ridge', bg = 'blue')\r\nenregi2.grid (row = 1, column = 4, padx = 10, pady = 10)\r\n\r\nenregi3 = tk.Button (frame, text = \"Enregistrement 3\", command = fe.destroy)\r\nenregi3.grid (row = 2, column = 4, padx = 10, pady = 10)\r\n\r\ndes = tk.Button (frame, text = 'Menu principal', command = fe.destroy)\r\ndes.grid (row = 4, column = 0, padx = 10, pady = 10)\r\n\r\ndes1 = tk.Button (frame, text = 'Reset', command = Reset )\r\ndes1.grid (row = 4, column = 1, padx = 10, pady = 10)\r\n\r\ndes2 = tk.Button (frame, text = 'Distance Rouge', command = Show_distance)\r\ndes2.grid (row = 4, column = 2, padx = 10, pady = 10)\r\n\r\npartie4 = tk.Frame (frame, width = (width*(0.618**3)), height = (width*(0.618**5)), bg = 'pink')\r\npartie4.grid (row = 4, column = 4)\r\n\r\n   \r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 - scale + scale*0.25, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 1.25*scale,\r\n                   (width-(scale*((size-1)*3+2)))/2 + 1.75*scale, (height-(scale*size*2*0.866)  )/2 + (0.866*scale*size) + 1.25*scale,\r\n                   start = 0, extent = 180, fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 - scale + scale*0.25, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 1.25*scale,\r\n                   (width-(scale*((size-1)*3+2)))/2 + 1.75*scale, (height-(scale*size*2*0.866)  )/2 + (0.866*scale*size) + 1.25*scale,\r\n                   start = 180, extent = 180, fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5+0.75), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*(0.866-0.75),\r\n                   (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5-0.75), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*(0.866+0.75),\r\n                   start = 90, extent = 180, fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5+0.75), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*(0.866-0.75),\r\n                   (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5-0.75), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*(0.866+0.75),\r\n                   start = 270, extent = 180, fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5+0.75), (height-(scale*size*2*0.866))/2 + (2*size*0.866*scale) - (0.866*scale) + scale*(0.866-0.75),\r\n                   (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5-0.75), (height-(scale*size*2*0.866))/2 + (0.866*size*2*scale) - (0.866*scale) + scale*(0.866+0.75),\r\n                   start = 270, extent = 180, fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5+0.75), (height-(scale*size*2*0.866))/2 + (2*size*0.866*scale) - (0.866*scale) + scale*(0.866-0.75),\r\n                   (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5-0.75), (height-(scale*size*2*0.866))/2 + (0.866*size*2*scale) - (0.866*scale) + scale*(0.866+0.75),\r\n                   start = 90, extent = 180, fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 - 1.25*scale - scale*0.5 + scale*((size-1)*3+2), (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 1.25*scale,\r\n                   (width-(scale*((size-1)*3+2)))/2 - 0.5*scale + 1.25*scale + scale*((size-1)*3+2), (height-(scale*size*2*0.866))/2 + (0.866*scale*size) + 1.25*scale,\r\n                   start = 0, extent = 180, fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_arc( (width-(scale*((size-1)*3+2)))/2 - 1.25*scale - scale*0.5 + scale*((size-1)*3+2), (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 1.25*scale,\r\n                   (width-(scale*((size-1)*3+2)))/2 - 0.5*scale + 1.25*scale + scale*((size-1)*3+2), (height-(scale*size*2*0.866))/2 + (0.866*scale*size) + 1.25*scale,\r\n                   start = 180, extent = 180, fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + 0.5*scale - scale*0.625, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746), (height-(scale*size*2*0.866))/2 + 1.25*scale*0.866,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*0.866 - scale*0.6494,\r\n                       fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 0.5*scale + scale*0.625, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 + 1.25*scale*0.866,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + scale*0.866 - scale*0.6494,\r\n                       fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 0.5*scale + 0.625*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale ,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size) + scale*(0.6494+ 0.866),\r\n                       fill = \"red\", outline = \"black\", width = 3 )\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + 0.5*scale - scale*0.625, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - scale*0.866 + 1.948*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size) + scale*(0.6494+ 0.866),\r\n                       fill = \"blue\", outline = \"black\", width = 3 )\r\n\r\n\r\n\r\npartie1.create_polygon(  (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 0.5*scale + 0.625*scale - 4, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale - 2,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale + 10 ,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size),\r\n                       fill = 'red', outline = 'red', width = 6)\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746) - 30, (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.3746), (height-(scale*size*2*0.866))/2 - 0.5*scale + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746) + 2, (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size) + scale*(0.6494+ 0.866) - 3,    \r\n                       fill = 'blue', outline = 'blue', width = 6)\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746) + 20, (height-(scale*size*2*0.866))/2 - 0.5*scale + (2*0.866*scale*size),\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - (0.866*scale) + (2*0.866*scale*size) + scale*(0.6494+ 0.866) -4,    \r\n                       fill = 'red', outline = 'red', width = 6)\r\n\r\npartie1.create_polygon(  (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 0.5*scale + 0.625*scale - 4, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale + 2,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - 2*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale - 10 ,\r\n                       (width-(scale*((size-1)*3+2)))/2 + scale*((size-1)*3+2) - scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size),\r\n                       fill = 'blue', outline = 'blue', width = 6)\r\n\r\npartie1.create_polygon(  (width-(scale*((size-1)*3+2)))/2 + 0.5*scale - scale*0.625 + 4, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale + 2,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 0.5*scale + 1.5*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - (1.948 - 0.866)*scale - 10 ,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 0.5*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size),\r\n                       fill = 'red', outline = 'red', width = 6)\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + 0.5*scale - scale*0.625 + 4, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale - 2,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 0.5*scale + 1.5*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size) - 0.866*scale + 1.948*scale + 10 ,\r\n                       (width-(scale*((size-1)*3+2)))/2 + 0.5*scale, (height-(scale*size*2*0.866))/2 + (0.866*scale*size),\r\n                       fill = 'blue', outline = 'blue', width = 6)\r\n\r\npartie1.create_polygon( (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746) - 10, (height-(scale*size*2*0.866))/2 + scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.3746), (height-(scale*size*2*0.866))/2 + scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) - scale*(0.5 + 0.3746) + 1, (height-(scale*size*2*0.866))/2 - scale*0.6494 + 4,    \r\n                       fill = 'red', outline = 'red', width = 6)\r\n\r\npartie1.create_polygon(  (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5), (height-(scale*size*2*0.866))/2 + scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746) + 20, (height-(scale*size*2*0.866))/2 + scale,\r\n                       (width-(scale*((size-1)*3+2)))/2 + (size*scale*1.5) + scale*(-0.5 + 0.3746), (height-(scale*size*2*0.866))/2 - scale*0.6494 + 4,    \r\n                       fill = 'blue', outline = 'blue', width = 6)\r\n\r\n\r\nPolice = tkFont.Font ( weight = \"bold\", size = -(int(scale/2)) )\r\n\r\nAffichage_plateau (plat, size, scale)\r\n\r\n\r\nfe.bind (\"<Button-1>\", Clic_gauche)\r\nfe.bind (\"<KeyPress-F11>\", Plein_ecran)\r\nfe.bind (\"<f>\", Plein_ecran)\r\n\r\n\r\nfe.mainloop ()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hexmat.py b/hexmat.py
--- a/hexmat.py	
+++ b/hexmat.py	
@@ -36,10 +36,10 @@
                                       x+(scale*0.5), y+(scale*2*0.866), x, y+(scale*0.866), fill = Rgb_convert((160,160,160)), activefill = Rgb_convert((180,180,180)), outline = 'black', width=3, tags = (str(i) + "," + str(j) , "cellule") )
                 
             if i == 0:
-                partie1.create_text( x, y + 0.2*scale, font = Police, fil = 'black', text = ascii_letters[j] )
+                partie1.create_text( x, y + 0.2*scale, font = Police, fill = 'black', text = ascii_letters[j] )
             
             if j == 0:
-                partie1.create_text( x, (y+1.5*scale), font = Police, fil = 'black', text = i+1)
+                partie1.create_text( x, (y+1.5*scale), font = Police, fill = 'black', text = i+1)
 
 
 def Reset_Value (New_plat, New_ordre):
